shulik10




=============================
=      File description     =
=============================
Locker.java - This class extends GeneralStorage. an implementation of a Locker, with all methods and fields.
LongTermStorage.java - This class extends GeneralStorage. It implements one Long Term storage which is shared
by all Locker instances.
GeneralStorage.java - An abstract class containing the general implementation of all Storage instances, all
shared methods and constants.
LockerTest.java - A class testing each method of the Locker class.
LongTermTest.java - A class testing each method of the LongTermStorage class.
SpaceshipDepositoryTest.java - A test suite combining all tests regarding storage both for Lockers and Long
term.
BoopingSite.java - Implements the BoopingSite class, including all methods required to get a list of hotels
according to specific parameters.
BoopingSiteTest.java - A test class for the BoopingSite class.


=============================
=          Design           =
=============================
This exercise was designed by test driven development. I started of with writing test classes for the Locker
class by running different scenarios which might happen and what is the expected outcome. I chose to use
and abstract class for all "storage" instances because both Locker and LongTermStorage are closely related and
I wanted to share some code between them to avoid righting the same code more then once if possible.
Using an abstract class makes the code more modular in my opinion, Allowing me to add or change the code
easily, if the code is relevant to both kinds of storage, it can be changed from the super class without
having to excess each of the extending classes separately. On the other hand, more specific changes to each
of the subclasses can be made straight by excessing the subclass and thus avoiding the chance of effecting the
the code of other classes.
Another design choice I made was to use composition in the Locker class. All Locker instances share the
same LongTermStorage instance so Locker class holds a static data member which is an instance of
LongTermStorage. This choice allows me to "outsource" actions to existing code from another class which helps
write less code and use working, existing code without the fear of creating new problems.
The tests for all classes are designed in a way that each of the "heavier" methods take up most of the testing
when all smaller methods are tested in between the larger tests. all common methods are tested at all
subclasses which share them.


=============================
=  Implementation details   =
=============================
For both Locker and LongTermStorage I used hash maps to store the information for each class because of its
similarity to python's dictionary. Also hash maps have constant time for addition deletion and search and we
perform a lot of the above. In BoopingSite The main design decision I made was to implement the "compare"
method inside the class and differently for each method because the parameters for sorting were different.
The BoopingSite class does not implement Comparator fully because compare is implemented in the inner scope
of each method. By using non primitive java types, there was no need to implement new classes for the
Comparator because each of the types has its own implementation, Allowing me to use it by changing my code to
 fit their API.


=============================
=    Answers to questions   =
=============================
